{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "url1 = 'https://raw.github.com/WesleyPasfield/March_Madness/master/KenPom.csv'\n",
    "url2 = 'https://raw.github.com/WesleyPasfield/March_Madness/master/RegularSeasonDetailedResults.csv'\n",
    "url3 = 'https://raw.github.com/WesleyPasfield/March_Madness/master/Teams.csv'\n",
    "url4 = 'https://raw.github.com/WesleyPasfield/March_Madness/master/TourneyCompactResults.csv'\n",
    "url5 = 'https://raw.github.com/WesleyPasfield/March_Madness/master/TourneySlots.csv'\n",
    "url6 = 'https://raw.github.com/WesleyPasfield/March_Madness/master/Team_Lookup.csv'\n",
    "kp = pd.read_csv(url1)\n",
    "regSeason = pd.read_csv(url2)\n",
    "teams = pd.read_csv(url3)\n",
    "tourneyResults = pd.read_csv(url4)\n",
    "tourneySlots = pd.read_csv(url5)\n",
    "teamLookup = pd.read_csv(url6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 4420 entries, 327 to 4746\n",
      "Data columns (total 19 columns):\n",
      "Pyth                 4420 non-null float64\n",
      "AdjO                 4420 non-null float64\n",
      "AdjD                 4420 non-null float64\n",
      "AdjT                 4420 non-null float64\n",
      "Luck                 4420 non-null float64\n",
      "Pyth_SOS             4420 non-null float64\n",
      "OppO                 4420 non-null float64\n",
      "OppD                 4420 non-null float64\n",
      "Pyth_NCSOS           4420 non-null float64\n",
      "Team_Year            4420 non-null object\n",
      "Pyth_zscore          4420 non-null float64\n",
      "AdjO_zscore          4420 non-null float64\n",
      "AdjD_zscore          4420 non-null float64\n",
      "AdjT_zscore          4420 non-null float64\n",
      "Luck_zscore          4420 non-null float64\n",
      "Pyth_SOS_zscore      4420 non-null float64\n",
      "OppO_zscore          4420 non-null float64\n",
      "OppD_zscore          4420 non-null float64\n",
      "Pyth_NCSOS_zscore    4420 non-null float64\n",
      "dtypes: float64(18), object(1)\n",
      "memory usage: 690.6+ KB\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 4420 entries, 327 to 4746\n",
      "Data columns (total 10 columns):\n",
      "Team_Year            4420 non-null object\n",
      "Pyth_zscore          4420 non-null float64\n",
      "AdjO_zscore          4420 non-null float64\n",
      "AdjD_zscore          4420 non-null float64\n",
      "AdjT_zscore          4420 non-null float64\n",
      "Luck_zscore          4420 non-null float64\n",
      "Pyth_SOS_zscore      4420 non-null float64\n",
      "OppO_zscore          4420 non-null float64\n",
      "OppD_zscore          4420 non-null float64\n",
      "Pyth_NCSOS_zscore    4420 non-null float64\n",
      "dtypes: float64(9), object(1)\n",
      "memory usage: 379.8+ KB\n"
     ]
    }
   ],
   "source": [
    "## Drop headers that exist in kp CSV file\n",
    "\n",
    "kp = kp.dropna(subset = ['Pyth_NCSOS'])\n",
    "\n",
    "## Replace seeds from team name\n",
    "\n",
    "kp['Team'] = kp['Team'].str.replace(' 16', '')\n",
    "kp['Team'] = kp['Team'].str.replace(' 15', '')\n",
    "kp['Team'] = kp['Team'].str.replace(' 14', '')\n",
    "kp['Team'] = kp['Team'].str.replace(' 13', '')\n",
    "kp['Team'] = kp['Team'].str.replace(' 12', '')\n",
    "kp['Team'] = kp['Team'].str.replace(' 11', '')\n",
    "kp['Team'] = kp['Team'].str.replace(' 10', '')\n",
    "kp['Team'] = kp['Team'].str.replace(' 9', '')\n",
    "kp['Team'] = kp['Team'].str.replace(' 8', '')\n",
    "kp['Team'] = kp['Team'].str.replace(' 7', '')\n",
    "kp['Team'] = kp['Team'].str.replace(' 6', '')\n",
    "kp['Team'] = kp['Team'].str.replace(' 5', '')\n",
    "kp['Team'] = kp['Team'].str.replace(' 4', '')\n",
    "kp['Team'] = kp['Team'].str.replace(' 3', '')\n",
    "kp['Team'] = kp['Team'].str.replace(' 2', '')\n",
    "kp['Team'] = kp['Team'].str.replace(' 1', '')\n",
    "\n",
    "## Change column names for team lookup, then merge to match KP names & Kaggle Names\n",
    "\n",
    "teamLookup.columns = ['Team', 'Team_Name']\n",
    "kp2 = kp.merge(teamLookup, on = 'Team', how = 'left')\n",
    "\n",
    "## Drop Null cases (Winston Salem St. , irrelevant), & Merge with Teams to get team_ids\n",
    "\n",
    "kp2['nullCheck'] = pd.isnull(kp2['Team_Name'])\n",
    "kp2= kp2[kp2.nullCheck != True]\n",
    "kp3 = kp2.merge(teams, on = 'Team_Name', how = 'left')\n",
    "\n",
    "## Convert variables to correct format & drop irrelevant variables\n",
    "\n",
    "kp3[['Pyth','AdjO','AdjD','AdjT','Luck']] = kp3[['Pyth','AdjO','AdjD','AdjT','Luck']].astype(float)\n",
    "kp3.drop(['Rank','Team','Conf','nullCheck','Team_Name'],inplace=True,axis=1,errors='ignore')\n",
    "\n",
    "## Add in total adjusted team efficiency (adjO - adjD) & create variable for Team_Year\n",
    "\n",
    "kp3['AdjT'] = kp3['AdjO'] - kp3['AdjD']\n",
    "kp3['Team_Year'] = kp3.Year.map(str) + \"_\" + kp3.Team_Id.map(str)\n",
    "kp3 = kp3[kp3['Year'] != 2002]\n",
    "\n",
    "## Drop Unnecessary Variables\n",
    "\n",
    "kp3.drop(['Year', 'Team_Id'], inplace=True, axis=1, errors='ignore')\n",
    "\n",
    "## Create z score for all variables\n",
    "\n",
    "cols = list(kp3.columns)\n",
    "cols.remove('Team_Year')\n",
    "\n",
    "for col in cols:\n",
    "    col_zscore = col + '_zscore'\n",
    "    kp3[col_zscore] = (kp3[col] - kp3[col].mean())/kp3[col].std(ddof=0)\n",
    "    \n",
    "## Pull out only z score tranformed variables\n",
    "kpFin = kp3[kp3.columns[9:19]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 4420 entries, 0 to 4419\n",
      "Data columns (total 22 columns):\n",
      "Team_Year                4420 non-null object\n",
      "Pyth_zscore              4420 non-null float64\n",
      "AdjO_zscore              4420 non-null float64\n",
      "AdjD_zscore              4420 non-null float64\n",
      "AdjT_zscore              4420 non-null float64\n",
      "Luck_zscore              4420 non-null float64\n",
      "Pyth_SOS_zscore          4420 non-null float64\n",
      "OppO_zscore              4420 non-null float64\n",
      "OppD_zscore              4420 non-null float64\n",
      "Pyth_NCSOS_zscore        4420 non-null float64\n",
      "AdjO_Vol_Max_zscore      4420 non-null float64\n",
      "AdjD_Vol_Max_zscore      4420 non-null float64\n",
      "AdjT_Vol_Max_zscore      4420 non-null float64\n",
      "AdjO_Vol_Min_zscore      4420 non-null float64\n",
      "AdjD_Vol_Min_zscore      4420 non-null float64\n",
      "AdjT_Vol_Min_zscore      4420 non-null float64\n",
      "AdjO_Vol_Range_zscore    4420 non-null float64\n",
      "AdjD_Vol_Range_zscore    4420 non-null float64\n",
      "AdjT_Vol_Range_zscore    4420 non-null float64\n",
      "AdjO_Vol_Avg_zscore      4420 non-null float64\n",
      "AdjD_Vol_Avg_zscore      4420 non-null float64\n",
      "AdjT_Vol_Avg_zscore      4420 non-null float64\n",
      "dtypes: float64(21), object(1)\n",
      "memory usage: 794.2+ KB\n"
     ]
    }
   ],
   "source": [
    "## Get Team_Year combinations, then create df for all game winners & losers\n",
    "\n",
    "regSeason['W_Team_Year'] = regSeason.Season.map(str) + '_' + regSeason.Wteam.map(str)\n",
    "regSeason['L_Team_Year'] = regSeason.Season.map(str) + '_' + regSeason.Lteam.map(str)\n",
    "regSeasonFin= regSeason[['W_Team_Year', 'L_Team_Year', 'possW', 'possL', 'possDiff']]\n",
    "\n",
    "## Create KP file that just has adjO, adjD, & AdjT for merging\n",
    "\n",
    "kp4 = kp3[['Team_Year', 'AdjO','AdjD','AdjT']]\n",
    "\n",
    "## Merge kp3 with regSeasonFin\n",
    "\n",
    "regSeasonFin2 = regSeasonFin.merge(kp4, left_on = 'W_Team_Year', right_on = 'Team_Year')\n",
    "regSeasonFin3 = regSeasonFin2.merge(kp4, left_on = 'L_Team_Year', right_on = 'Team_Year')\n",
    "regSeasonFin3.columns = ['W_Team_Year', 'L_Team_Year', 'possW', 'possL', \n",
    "                         'possDiff', 'W_Team_Year2','W_AdjO','W_AdjD','W_AdjT',\n",
    "                        'L_Team_Year2', 'L_AdjO', 'L_AdjD', 'L_AdjT']\n",
    "\n",
    "regSeasonFin4 = regSeasonFin3\n",
    "regSeasonFin4['W_expO'] = (regSeasonFin3['W_AdjO'] + regSeasonFin3['L_AdjD']) / 2\n",
    "regSeasonFin4['W_expD'] = (regSeasonFin3['W_AdjD'] + regSeasonFin3['L_AdjO']) / 2\n",
    "regSeasonFin4['L_expO'] = (regSeasonFin3['L_AdjO'] + regSeasonFin3['W_AdjD']) / 2\n",
    "regSeasonFin4['L_expD'] = (regSeasonFin3['L_AdjD'] + regSeasonFin3['W_AdjO']) / 2\n",
    "regSeasonFin4['expF'] = regSeasonFin3['W_AdjT'] - regSeasonFin3['L_AdjT']\n",
    "regSeasonFin4['W_ActO_ExpO'] = regSeasonFin4['possW'] - regSeasonFin4['W_expO']\n",
    "regSeasonFin4['W_ActD_ExpD'] = regSeasonFin4['possL'] - regSeasonFin4['W_expD']\n",
    "regSeasonFin4['L_ActO_ExpO'] = regSeasonFin4['possL'] - regSeasonFin4['L_expO']\n",
    "regSeasonFin4['L_ActD_ExpD'] = regSeasonFin4['possW'] - regSeasonFin4['L_expD']\n",
    "regSeasonFin4['ActF-ExpF'] = regSeasonFin4['possDiff'] - regSeasonFin4['expF']\n",
    "regSeasonFin4['W_ActO_ExpO_Abs'] = abs(regSeasonFin4['possW'] - regSeasonFin4['W_expO'])\n",
    "regSeasonFin4['W_ActD_ExpD_Abs'] = abs(regSeasonFin4['possL'] - regSeasonFin4['W_expD'])\n",
    "regSeasonFin4['L_ActO_ExpO_Abs'] = abs(regSeasonFin4['possL'] - regSeasonFin4['L_expO'])\n",
    "regSeasonFin4['L_ActD_ExpD_Abs'] = abs(regSeasonFin4['possW'] - regSeasonFin4['L_expD'])\n",
    "regSeasonFin4['ActF-ExpF_Abs'] = abs(regSeasonFin4['possDiff'] - regSeasonFin4['expF'])\n",
    "\n",
    "regSeasLoss = regSeasonFin4[['L_Team_Year','L_ActO_ExpO', 'L_ActO_ExpO_Abs', \n",
    "                             'L_ActD_ExpD','L_ActD_ExpD_Abs','ActF-ExpF','ActF-ExpF_Abs']]\n",
    "                                                            \n",
    "regSeasWin = regSeasonFin4[['W_Team_Year','W_ActO_ExpO', 'W_ActO_ExpO_Abs', 'W_ActD_ExpD',\n",
    "                             'W_ActD_ExpD_Abs', 'ActF-ExpF', 'ActF-ExpF_Abs']]\n",
    "\n",
    "regSeasLoss.columns = ['Team_Year', 'AdjO_Vol', 'AdjO_Vol_Abs', 'AdjD_Vol', 'AdjD_Vol_Abs', 'AdjT_Vol', 'AdjT_Vol_Abs']\n",
    "regSeasWin.columns = ['Team_Year', 'AdjO_Vol', 'AdjO_Vol_Abs', 'AdjD_Vol', 'AdjD_Vol_Abs', 'AdjT_Vol', 'AdjT_Vol_Abs']\n",
    "\n",
    "regSeasConcat = pd.concat([regSeasLoss, regSeasWin])\n",
    "regSeasGroupAverage = regSeasConcat.groupby(['Team_Year']).mean()\n",
    "regSeasGroupAverage['Team_Year'] = regSeasGroupAverage.index\n",
    "regSeasGroupAverage = regSeasGroupAverage[['Team_Year', 'AdjO_Vol_Abs', 'AdjD_Vol_Abs', 'AdjT_Vol_Abs']]\n",
    "regSeasGroupAverage.columns = ['Team_Year', 'AdjO_Vol_Avg', 'AdjD_Vol_Avg', 'AdjT_Vol_Avg']\n",
    "\n",
    "regSeasGroupMax = regSeasConcat.groupby(['Team_Year']).max()\n",
    "regSeasGroupMax['Team_Year'] = regSeasGroupMax.index\n",
    "regSeasGroupMax = regSeasGroupMax[['Team_Year', 'AdjO_Vol' ,'AdjD_Vol', 'AdjT_Vol']]\n",
    "regSeasGroupMax.columns = ['Team_Year', 'AdjO_Vol_Max' ,'AdjD_Vol_Max', 'AdjT_Vol_Max']\n",
    "\n",
    "regSeasGroupMin = regSeasConcat.groupby(['Team_Year']).min()\n",
    "regSeasGroupMin['Team_Year'] = regSeasGroupMin.index\n",
    "regSeasGroupMin = regSeasGroupMin[['Team_Year', 'AdjO_Vol' ,'AdjD_Vol', 'AdjT_Vol']]\n",
    "regSeasGroupMin.columns = ['Team_Year', 'AdjO_Vol_Min' ,'AdjD_Vol_Min', 'AdjT_Vol_Min']\n",
    "\n",
    "regSeasGroupMaxMin = regSeasGroupMax.merge(regSeasGroupMin, on = 'Team_Year')\n",
    "regSeasGroupMaxMin['AdjO_Vol_Range'] = regSeasGroupMaxMin['AdjO_Vol_Max'] - regSeasGroupMaxMin['AdjO_Vol_Min']\n",
    "regSeasGroupMaxMin['AdjD_Vol_Range'] = regSeasGroupMaxMin['AdjD_Vol_Max'] - regSeasGroupMaxMin['AdjD_Vol_Min']\n",
    "regSeasGroupMaxMin['AdjT_Vol_Range'] = regSeasGroupMaxMin['AdjT_Vol_Max'] - regSeasGroupMaxMin['AdjT_Vol_Min']\n",
    "regSeasGroupFin = regSeasGroupMaxMin.merge(regSeasGroupAverage, on = 'Team_Year')\n",
    "regSeasGroupFin.index = regSeasGroupFin['Team_Year']\n",
    "regSeasGroupFin.head(n =10)\n",
    "\n",
    "## Create z score for all variables\n",
    "\n",
    "cols = list(regSeasGroupFin.columns)\n",
    "cols.remove('Team_Year')\n",
    "\n",
    "for col in cols:\n",
    "    col_zscore = col + '_zscore'\n",
    "    regSeasGroupFin[col_zscore] = (regSeasGroupFin[col] - regSeasGroupFin[col].mean())/regSeasGroupFin[col].std(ddof=0)\n",
    "    \n",
    "regSeasMerge = regSeasGroupFin[['Team_Year', 'AdjO_Vol_Max_zscore', 'AdjD_Vol_Max_zscore',\n",
    "                               'AdjT_Vol_Max_zscore', 'AdjO_Vol_Min_zscore', 'AdjD_Vol_Min_zscore',\n",
    "                               'AdjT_Vol_Min_zscore', 'AdjO_Vol_Range_zscore', 'AdjD_Vol_Range_zscore',\n",
    "                               'AdjT_Vol_Range_zscore', 'AdjO_Vol_Avg_zscore', 'AdjD_Vol_Avg_zscore',\n",
    "                               'AdjT_Vol_Avg_zscore']]\n",
    "\n",
    "\n",
    "kpMerge = kpFin.merge(regSeasMerge, on = 'Team_Year', how = 'left')\n",
    "kpMerge.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "## Create modeling file by merging reg season results with tourney results\n",
    "\n",
    "tourneyUse = tourneyResults[['Wteam', 'Lteam', 'Win']]\n",
    "\n",
    "kpModel = tourneyUse.merge(kpMerge, left_on = 'Wteam', right_on = 'Team_Year')\n",
    "kpModel = kpModel.merge(kpMerge, left_on = 'Lteam', right_on = 'Team_Year')\n",
    "\n",
    "kpModel['Pyth_diff'] = kpModel['Pyth_zscore_x'] - kpModel['Pyth_zscore_y']\n",
    "kpModel['AdjO_diff'] = kpModel['AdjO_zscore_x'] - kpModel['AdjO_zscore_y']\n",
    "kpModel['AdjD_diff'] = kpModel['AdjD_zscore_x'] - kpModel['AdjD_zscore_y']\n",
    "kpModel['AdjT_diff'] = kpModel['AdjT_zscore_x'] - kpModel['AdjT_zscore_y']\n",
    "kpModel['Luck_diff'] = kpModel['Luck_zscore_x'] - kpModel['Luck_zscore_y']\n",
    "kpModel['Pyth_SOS_diff'] = kpModel['Pyth_SOS_zscore_x'] - kpModel['Pyth_SOS_zscore_y']\n",
    "kpModel['OppO_diff'] = kpModel['OppO_zscore_x'] - kpModel['OppO_zscore_y']\n",
    "kpModel['OppD_diff'] = kpModel['OppD_zscore_x'] - kpModel['OppD_zscore_y']\n",
    "kpModel['Pyth_NCSOS_diff'] = kpModel['Pyth_NCSOS_zscore_x'] - kpModel['Pyth_NCSOS_zscore_y']\n",
    "kpModel['AdjO_Vol_Max_diff'] = kpModel['AdjO_Vol_Max_zscore_x'] - kpModel['AdjO_Vol_Max_zscore_y']\n",
    "kpModel['AdjD_Vol_Max_diff'] = kpModel['AdjD_Vol_Max_zscore_x'] - kpModel['AdjD_Vol_Max_zscore_y']\n",
    "kpModel['AdjT_Vol_Max_diff'] = kpModel['AdjT_Vol_Max_zscore_x'] - kpModel['AdjT_Vol_Max_zscore_y']\n",
    "kpModel['AdjO_Vol_Min_diff'] = kpModel['AdjO_Vol_Min_zscore_x'] - kpModel['AdjO_Vol_Min_zscore_y']\n",
    "kpModel['AdjD_Vol_Min_diff'] = kpModel['AdjD_Vol_Min_zscore_x'] - kpModel['AdjD_Vol_Min_zscore_y']\n",
    "kpModel['AdjT_Vol_Min_diff'] = kpModel['AdjT_Vol_Min_zscore_x'] - kpModel['AdjT_Vol_Min_zscore_y']\n",
    "kpModel['AdjO_Vol_Range_diff'] = kpModel['AdjO_Vol_Range_zscore_x'] - kpModel['AdjO_Vol_Range_zscore_y']\n",
    "kpModel['AdjD_Vol_Range_diff'] = kpModel['AdjD_Vol_Range_zscore_x'] - kpModel['AdjD_Vol_Range_zscore_y']\n",
    "kpModel['AdjT_Vol_Range_diff'] = kpModel['AdjT_Vol_Range_zscore_x'] - kpModel['AdjT_Vol_Range_zscore_y']\n",
    "kpModel['AdjO_Vol_Avg_diff'] = kpModel['AdjO_Vol_Avg_zscore_x'] - kpModel['AdjO_Vol_Avg_zscore_y']\n",
    "kpModel['AdjD_Vol_Avg_diff'] = kpModel['AdjD_Vol_Avg_zscore_x'] - kpModel['AdjD_Vol_Avg_zscore_y']\n",
    "kpModel['AdjT_Vol_Avg_diff'] = kpModel['AdjT_Vol_Avg_zscore_x'] - kpModel['AdjT_Vol_Avg_zscore_y']\n",
    "\n",
    "kpModel['id'] = kpModel.Wteam.str[:4] + '_' + kpModel.Wteam.str[4:] + '_' + kpModel.Lteam.str[4:]\n",
    "#kp3['Team_Year'] = kp3.Year.map(str) + \"_\" + kp3.Team_Id.map(str)\n",
    "kpFinal = kpModel.iloc[:,[47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67]]\n",
    "kpTarget = kpModel['Win']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from sklearn import ensemble\n",
    "from sklearn import datasets\n",
    "from sklearn.utils import shuffle\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "tIndex = np.random.rand(len(kpFinal)) < 0.75\n",
    "X_train = kpFinal[tIndex]\n",
    "X_test = kpFinal[~tIndex]\n",
    "y_train = kpTarget[tIndex]\n",
    "y_test = kpTarget[~tIndex]\n",
    "\n",
    "\n",
    "original_params = {'n_estimators': 1000, 'max_leaf_nodes': 4, 'max_depth': None, 'random_state': 2,\n",
    "                   'min_samples_split': 5}\n",
    "\n",
    "plt.figure()\n",
    "\n",
    "for label, color, setting in [('No shrinkage', 'orange',\n",
    "                               {'learning_rate': 1.0, 'subsample': 1.0}),\n",
    "                              ('learning_rate=0.1', 'turquoise',\n",
    "                               {'learning_rate': 0.1, 'subsample': 1.0}),\n",
    "                              ('subsample=0.5', 'blue',\n",
    "                               {'learning_rate': 1.0, 'subsample': 0.5}),\n",
    "                              ('learning_rate=0.1, subsample=0.5', 'gray',\n",
    "                               {'learning_rate': 0.1, 'subsample': 0.5}),\n",
    "                              ('learning_rate=0.1, max_features=2', 'magenta',\n",
    "                               {'learning_rate': 0.1, 'max_features': 2})]:\n",
    "    params = dict(original_params)\n",
    "    params.update(setting)\n",
    "\n",
    "    clf = ensemble.GradientBoostingClassifier(**params)\n",
    "    clf.fit(X_train, y_train)\n",
    "\n",
    "    # compute test set deviance\n",
    "    test_deviance = np.zeros((params['n_estimators'],), dtype=np.float64)\n",
    "\n",
    "    for i, y_pred in enumerate(clf.staged_decision_function(X_test)):\n",
    "        # clf.loss_ assumes that y_test[i] in {0, 1}\n",
    "        test_deviance[i] = clf.loss_(y_test, y_pred)\n",
    "\n",
    "    plt.plot((np.arange(test_deviance.shape[0]) + 1)[::5], test_deviance[::5],\n",
    "            '-', color=color, label=label)\n",
    "\n",
    "plt.legend(loc='upper left')\n",
    "plt.xlabel('Boosting Iterations')\n",
    "plt.ylabel('Test Set Deviance')\n",
    "\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
